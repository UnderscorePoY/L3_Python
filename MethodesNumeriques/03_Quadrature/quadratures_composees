#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Nov 26 09:30:34 2021

@author: thomas.bescond
"""

import numpy as np
import matplotlib.pyplot as plt


# Formules élémentaires :
# - RAG     : rectangle à gauche
# - RAD     : rectangle à droite
# - PM      : point milieu
# - TZ      : trapèzes
# - Simpson : Simpson
        
def RAG_elem(f, a, b):
    return (b-a)*f(a)

def RAD_elem(f, a, b):
    return (b-a)*f(b)

def PM_elem(f, a, b):
    return (b-a)*f((a+b)/2)

def TZ_elem(f, a, b):
    return (b-a)*(1/2*(f(a)+f(b)))

def Simpson_elem(f, a, b):
    return (b-a)*(1/6*f(a)+2/3*f((a+b)/2)+1/6*f(b))



# Méthodes composées

def gen_comp(f, elem, noeuds):
    """ Crée une formule de quadrature composée basée sur une formule élémentaire."""
    
    S = 0.
    for i in range(len(noeuds)-1):
        x, y = noeuds[i], noeuds[i+1]
        S += elem(f, x, y)
    
    return S

def RAG_comp(f, noeuds):
    return gen_comp(f, RAG_elem, noeuds)

def RAD_comp(f, noeuds):
    return gen_comp(f, RAD_elem, noeuds)
        
def PM_comp(f, noeuds):
    return gen_comp(f, PM_elem, noeuds)

def TZ_comp(f, noeuds):
    return gen_comp(f, TZ_elem, noeuds)

def Simpson_comp(f, noeuds):
    return gen_comp(f, Simpson_elem, noeuds)


def TZ_comp_opti(f, noeuds):
    """ Formule des trapèzes optimisée pour limiter le nombre d'évaluations de la fonction f.
    2n => n+1 évaluations."""
    
    S = 0
    n = len(noeuds)
    vals = [f(x) for x in noeuds] # Cache les valeurs de f en les noeuds
    
    # terme initial
    S = 1/2*(noeuds[1]-noeuds[0])*vals[0]
    
    # terme final
    if n > 2:
        S += 1/2*(noeuds[n-1]-noeuds[n-2])*vals[n-1]
    
    # termes intermédiaires
    if n > 3:
        for i in range(1, n-1):
            S += (noeuds[i+1]-noeuds[i])*vals[i]
            
    return S

def Simpson_comp_opti(f, noeuds):
    """ Formule de Simpson optimisée pour limiter le nombre d'évaluations de la fonction f.
    3n => 2n+1 évaluations."""
    
    S = 0
    n = len(noeuds)
    vals = [f(x) for x in noeuds] # Cache les valeurs de f en les noeuds
    vals_mil = [f((noeuds[i]+noeuds[i+1])/2) for i in range(n-1)] # Cache les valeurs de f en les milieux des noeuds
    
    # terme initial
    S = 1/6*(noeuds[1]-noeuds[0])*vals[0]
    
    # termes des milieux
    for i in range(n-1):
       S += 2/3*(noeuds[i+1]-noeuds[i])*vals_mil[i]
    
    # terme final   
    if n > 2:
        S += 1/6*(noeuds[n-1]-noeuds[n-2])*vals[n-1]
    
    # termes intermédiaires
    if n > 3:
        for i in range(1, n-1):
            S += 1/3*(noeuds[i+1]-noeuds[i])*vals[i]
        
    return S

# Dictionnaire des méthodes de quadratures composées
RAG = "RAG"
RAD = "RAD"
PM = "PM"
TZ = "TZ"
SIMPSON = "SIMPSON"
METHODE_DESC, METHODE_FUNC = 0, 1
METHODES = {
    RAG : ["Rectangles à gauche", RAG_comp],
    RAD : ["Rectangles à droite", RAD_comp],
    PM :  ["Point milieu", PM_comp],
    TZ : ["Trapèzes", TZ_comp_opti],
    SIMPSON : ["Simpson", Simpson_comp_opti]
}


# Utils

def verif_noeuds(noeuds):
    """ Vérifie que les noeuds d'une subdivision sont correctement ordonnés, du plus petit
    au plus grand."""
    
    for i in range(len(noeuds)-1):
        x, y = noeuds[i], noeuds[i+1]
        assert x < y, "a n'est pas strictement inférieur à b"


class Test_Quadrature:
    """ Environnement de test compilant les calculs d'intégrales à partir des différentes 
    méthodes de quadrature composée"""
    
    def __init__(self, func, a, b, noeuds):
        self.f = func.f
        self.F = func.F
        self.a = a
        self.b = b
        self.noeuds = noeuds
        self.dic_approx = {}
        
    def run(self):
        self.exacte = self.F(b) - self.F(a)
        for key, methode in METHODES.items():
            self.dic_approx[key] = methode[METHODE_FUNC](self.f, noeuds)
    
    def print(self):
        print("Environnement :")
        print("\tIntervalle d'étude [a,b] : [{},{}]".format(self.a, self.b))
        print("\tNombre de noeuds : n = ", len(self.noeuds))
        print("\tNoeuds : ", self.noeuds)
        print()
        
        print("Calculs d'intégrales :")
        print("\tValeur exacte : ", self.exacte)
        for key, methode in METHODES.items():
            print("\t{} : {}".format(methode[METHODE_DESC], methode[METHODE_FUNC]))

        
    def erreur_absolue(self):
        """ Retourne l'erreur absolue en valeurs absolue par rapport à la valeur exacte. """
        return {key: np.abs(self.dic_approx[key]-self.exacte) for key, methode in METHODES.items()}
 
       
    def erreur_relative(self):
        """ Retourne l'erreur relative en valeurs absolue par rapport à la valeur exacte. """
        return {key: np.abs(self.dic_approx[key]-self.exacte)/np.abs(self.exacte) for key, methode in METHODES.items()}

    
class Func:
    """ Classe de fonctions comprenant une fonction f et une primitive F. """
    
    def __init__(self, f, F):
        self.f = f
        self.F = F

def subdivision_uniforme(a, b, n):
    """ Crée une liste de n noeuds uniformément répartis du segment [a,b], bornes comprises
    (donc crée n-2 points intermédiaires)."""
    lst = [a+(b-a)*i/(n-1) for i in range(n)]
    return lst


##########
# SCRIPT #
##########

# Fonctions personnalisées à tester
m = Func(lambda x: np.pi*np.sin(np.pi*x),
         lambda x: -np.cos(np.pi*x))

z = Func(lambda x: x**5,
         lambda x: 1/6*x**6)


# VARIABLES UTILISATEURS
a, b = 0, 1
tailles = np.array([i*20 for i in range(1, 101)])
func = z

# DEBUT SCRIPT

pas = (b-a)/tailles  # uniquement pour la subdivision uniforme

erreurs_dic = {key: [] for key, _ in METHODES.items()}

env = Test_Quadrature(func, a, b, None) # Initialisation des noeuds lorsque leur nombre est connu, i.e. dans la boucle

for n in tailles :
    noeuds = subdivision_uniforme(a, b, n)
    env.noeuds = noeuds
    # verif_noeuds(noeuds)
    
    env.run()
    # env.print()
    # print(env.erreur_absolue())
    # print(env.erreur_relative())
  
    erreurs_abs = env.erreur_absolue()
    for key, _ in METHODES.items():
        erreurs_dic[key].append(erreurs_abs[key])

# Construction d'un graphique en double échelle logarithmique pour faire apparaître l'ordre des méthodes de quadrature
plt.title("Erreur relative en fonction du pas de la subdivision, de formules de quadratures composées")
plt.loglog(pas, erreurs_dic[RAG], 'b', label = "Erreur RAG")
#plt.loglog(pas, erreurs_dic[RAD], 'c', label = "Erreur RAD")
plt.loglog(pas, erreurs_dic[PM], 'k', label = "Erreur PM")
#plt.loglog(pas, erreurs_dic[TZ], 'r', label = "Erreur TZ")
plt.loglog(pas, erreurs_dic[SIMPSON], 'g', label = "Erreur Simpson")
plt.legend()
plt.show()

# Calcul des ordres, par régression linéaire
coeff_dir_RAG, _ = np.polyfit(np.log(pas), np.log(erreurs_dic[RAG]), 1)
coeff_dir_PM, _ = np.polyfit(np.log(pas), np.log(erreurs_dic[PM]), 1)
coeff_dir_Simpson, _ = np.polyfit(np.log(pas), np.log(erreurs_dic[SIMPSON]), 1)

print("Coefficient directeur RAG : {}".format(coeff_dir_RAG))
print("Coefficient directeur PM : {}".format(coeff_dir_PM))
print("Coefficient directeur Simpson : {}".format(coeff_dir_Simpson))


# FIN SCRIPT


'''
def test_application_formule_RAD():
    """ Test d'application de la formule des rectangles à gauches pour un nombre croissant de noeuds. """
    
    def j(x):
        return x**2
    
    L = [10, 20, 30, 40, 100, 200, 400, 1000, 2000]
    a, b = 0, 1
    target = 1/3 # x**2 entre 0 et 1
    
    # => rectangles à gauche
    results_RAG = []
    
    for n in L:
        noeuds = subdivision_uniforme(a, b, n)
        results_RAG.append(RAG_comp(j, noeuds))
    
    errors_RAG = [abs(target-x) for x in results_RAG]
    # print(errors_RAG)
    
    # Pas de la subdivision en fonction de l'erreur
    plt.loglog((b-a)/np.array(L), errors_RAG)
    
    # => Simpson
    
    results_Simpson = []
    
    for n in L:
        noeuds = subdivision_uniforme(a, b, n)
        results_Simpson.append(Simpson_comp_opti(j, noeuds))
    
    errors_Simpson = [abs(target-x) for x in results_Simpson]
    print(errors_Simpson)
    
    # Pas de la subdivision en fonction de l'erreur
    plt.loglog((b-a)/np.array(L), errors_Simpson)
    


def verification_formules_composees_optimisees():
    """ Vérifications des formules composées optimisées. """
    
    def j(x):
        return x**2
    
    a, b = 0, 1
    n = 10
    noeuds = subdivision_uniforme(a, b, n)
    print("Vérification des formules des trapèzes")
    print("Méthode non optimisée : ", TZ_comp(j, noeuds))
    print("Méthode optimisée : ", TZ_comp_opti(j, noeuds))
    
    print("Vérification des formules de Simpson")
    print("Méthode non optimisée : ", Simpson_comp(j, noeuds))
    print("Méthode optimisée : ", Simpson_comp_opti(j, noeuds))
'''
